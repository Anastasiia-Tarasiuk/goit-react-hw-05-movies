{"version":3,"file":"static/js/965.1181df3d.chunk.js","mappings":"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","sources":["components/MovieView/MovieView.styled.jsx","components/MovieView/MovieView.jsx","components/GoBackButton/GoBackButton.styled.jsx","components/GoBackButton/GoBackButton.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/apiGetMovies/apiGetMovies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n    display: flex;\n`\n\nexport const Poster = styled.img`\n    margin-right: 20px;\n    margin-bottom: 50px;\n`\n\nexport const GenresList = styled.ul`\n    display: flex;\n    list-style-type: none;\n    padding-left: 0;    \n`\n\nexport const GenresItem = styled.li`    \n    :not(:last-child) {\n       margin-right: 10px; \n    }\n`","import { Container, Poster, GenresList, GenresItem } from \"./MovieView.styled\";\nimport PropTypes from 'prop-types'; \n\nexport const MovieView = ({ movieInfo }) => {\n  \n    const { poster_path, title, vote_average, overview, genres, release_date } = movieInfo;\n    const url = `https://image.tmdb.org/t/p/w300/${poster_path}`;\n\n    return (\n        <Container>        \n            <Poster src={url} alt=\"Movie poster\"/>\n            <div>\n                <h2>{title} {release_date.slice(0, 4)}</h2>\n                <p>User Score: {(vote_average*10).toFixed(0)}%</p>\n                <h3>Overview</h3>\n                <p>{overview}</p>\n                <h3>Genres</h3>\n                <GenresList>\n                    {genres.map(genre => <GenresItem key={genre.id}>{genre.name}</GenresItem>)}\n                </GenresList>\n            </div>\n        </Container>\n    )\n}\n\nMovieView.propTypes = {\n    onSubmit: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        overview: PropTypes.string.isRequired,\n        genres: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n        }))\n    })\n}","import styled from \"@emotion/styled\";\n\nexport const BackButton = styled.button`\n    margin-bottom: 20px;\n\n    :hover, :focus {\n        background-color: orange;\n        color: white;\n        border-color: white;\n    }\n`\n","import { useNavigate } from \"react-router-dom\";\nimport { BackButton } from \"./GoBackButton.styled\"\n\nexport const GoBackButton = () => {\n\n    const navigate = useNavigate();    \n    \n    return (\n        <BackButton type=\"button\" onClick={() => navigate(-1)}>\n            Go back\n        </BackButton>\n    )\n}","import styled from \"@emotion/styled\";\n\nexport const InfoList = styled.ul`\n    padding-bottom: 20px;\n    border-bottom: 1px solid black;\n`\n\nexport const InfoBox = styled.div`\n    padding: 20px 0;\n    border-top: 1px solid black;\n`","import { Link, Outlet, useParams } from \"react-router-dom\";\nimport { MovieView } from \"components/MovieView/MovieView\";\nimport { apiGetMovieInfoById } from \"services/apiGetMovies/apiGetMovies\";\nimport { useState, useEffect } from \"react\";\nimport { GoBackButton } from \"components/GoBackButton/GoBackButton\";\nimport { InfoBox, InfoList } from \"./MovieDetails.styled\";\n\nconst MovieDetails = () => {\n    const [movieInfo, setMovieInfo] = useState(null);\n    const { movieId } = useParams('');\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        apiGetMovieInfoById(movieId)\n            .then(res => setMovieInfo(res))\n            .catch(error => {\n                const msgForApiBadRespond = \"Something went wrong.\";\n                setError(msgForApiBadRespond);\n                console.log(error); \n            });    \n    }, [movieId])\n    \n    return (\n        <>\n            <Link to='/'><GoBackButton/></Link>\n            {movieInfo && <MovieView movieInfo={movieInfo} />}     \n            <InfoBox>\n                <p>Additional information</p>\n                {error\n                    ? <p>Here is no info :(</p>\n                    : (<InfoList>\n                    <li>\n                        <Link to=\"cast\">Cast</Link>\n                    </li>\n                    <li>\n                        <Link to=\"reviews\">Reviews</Link>\n                    </li>\n                </InfoList>)}\n                <Outlet />\n            </InfoBox>\n        </>\n    )\n}\n\nexport default MovieDetails;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '1691901ed2ae3d246dfa1eabb74d344d';\n\nconst params = {\n    api_key: API_KEY,\n    language: 'en-US',\n}\n\nexport const apiMovieSearch = async (searchQuery, page) => {\n    const response = await axios(`search/movie/`, {\n        params: {\n            ...params,\n            query: searchQuery,\n            page, \n        }\n    });\n    return response.data;\n}\n\nexport const apiTrandingMovies = async () => {\n    const response = await axios(`trending/all/day`, {\n        params,\n    });\n    return response.data;\n}\n\nexport const apiGetMovieInfoById = async (movie_id) => {\n    const response = await axios(`movie/${movie_id}`, {\n        params,\n    });\n    return response.data;\n}\n\nexport const apiGetMovieCastById = async (movie_id) => {\n    const response = await axios(`movie/${movie_id}/credits`, {\n        params,\n    });\n    return response.data;\n}\n\nexport const apiGetMovieReviewsById = async (movie_id) => {\n    const response = await axios(`movie/${movie_id}/reviews`, {\n        params,\n    });\n    return response.data;\n}"],"names":["Container","styled","Poster","GenresList","GenresItem","MovieView","movieInfo","poster_path","title","vote_average","overview","genres","release_date","url","src","alt","slice","toFixed","map","genre","name","id","BackButton","GoBackButton","navigate","useNavigate","type","onClick","InfoList","InfoBox","useState","setMovieInfo","movieId","useParams","error","setError","useEffect","apiGetMovieInfoById","then","res","catch","console","log","to","axios","params","api_key","language","apiMovieSearch","searchQuery","page","query","response","data","apiTrandingMovies","movie_id","apiGetMovieCastById","apiGetMovieReviewsById"],"sourceRoot":""}